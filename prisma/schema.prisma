generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgets        Budget[]
  pots           Pot[]
  transactions   Transaction[]
  recurringBills RecurringBill[]
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  label       String        @unique
  budgets     Budget[]
  transaction Transaction[]
}

model Color {
  id      String   @id @default(cuid())
  name    String   @unique
  label   String   @unique
  value   String   @unique
  budgets Budget[]
  pots    Pot[]
}

model Transaction {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  counterparty    String
  category        Category        @relation(fields: [categoryId], references: [id])
  categoryId      String
  amount          Decimal         @db.Decimal(12, 2)
  transactionType TransactionType
  recurringBill   RecurringBill?  @relation(fields: [recurringBillId], references: [id])
  recurringBillId String?
}

model Budget {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  maximumSpend Decimal  @db.Decimal(12, 2)
  color        Color    @relation(fields: [colorId], references: [id])
  colorId      String
}

model Pot {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  name          String
  target        Decimal  @db.Decimal(12, 2)
  currentAmount Decimal  @default(0.00) @db.Decimal(12, 2)
  color         Color    @relation(fields: [colorId], references: [id])
  colorId       String

  @@unique([userId, name])
}

model RecurringBill {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  counterparty String
  amount       Decimal       @db.Decimal(12, 2)
  transactions Transaction[]
}
